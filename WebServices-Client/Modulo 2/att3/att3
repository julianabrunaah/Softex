 - Explique quais são as seis regras de uma API REST.

1. Cliente-Server - Retrição básica para a aplicação REST que separa a arquitetura e responsabilidade entre dois ambientes.
Cliente: Que realiza as requisições para o servidor (requests)
Servidor: Recebe as requisições, executa e devolve uma resposta.

2. Stateless - O mesmo cliente pode fazer várias requisições ao servidor, contato que todas as requests tenham as informações necessárias para 
que o servidor possa compreender e executar, enviando uma resposta ao cliente que também deve conter as informações solicitadas. Entretanto, todas as 
informações de estado ficam com o cliente, inclusive os dados sobre as sessões anteriores assim o seridor interpreta cada uma como uma nova sessão.

3. Cacheable - Como citado anteriormente o mesmo cliente pode fazer várias requições ao servidor, assim como vários clientes podem solicitar o mesmo 
recurso. A alta demanda dessas solicitações pode afetar a performance do servidor, para que isso não ocorra o servidor pode armazenar no cache o 
recurso ápos executar a solicitação pela primeira vez, os demais clientes que repetirem a solicitação receberão o que está no cache. O tempo que o cache
armazena o recurso varia. 

4. Uniform Interface - São regras para padronização da comunicação entre cliente e servidor para que qualquer cliente possa interagir com a API REST.

Identificação: Cada recurso deve ter uma URI (Uniform Resource Identifier) e um verbo HTTP (PUT, GET, POST, DELETE) para ser acessado. A URI 
mais comum é a URL que identifica e localiza o recurso na Web.
EXEMPLO:   
HTTP/1.1 GET http://exemplo.com/usario/fulano

Representação: É a resposta do servidor, a forma como o recurso é devolvido que pode ser em HTML, XML, JSON, entre outras. 
EXEMPLO: 
{
"nome": "fulano",
"profissao": "programador",
}

Resposta auto-explicativa: Além da informações que podem ser passadas, como vista acima, também é necessário passar metadados tanto na requisição
quanto na resposta. 
EXEMPLO: 
GET /#!/usuario/fulano HTTP/1.1
User-Agent: Chrome/37.0.2062.94
Accept: application/json
Host: exemplo.com

Hypermedia: Retornar todas as informações necessárias na resposta para que cliente saiba acessar a todos os recursos.

5. Layered System - já foi estabelecido que existe uma comunicação cliente - servidor que segue um protocolo para requisição e resposta, entretanto 
é importante que não necessariamente existe um único servidor, pode haver outros servidores intermediários que oferecem camadas de segurança, camadas
de cache e load-balancing, entre outras funcionalidades. A quantidade dessas camadas não afeta a comunicação, independente disso a requisição e 
resposta deve seguir o protocolo. 

6. Code-On-Demand (Opcional) - Permite que o cliente receba como resposta parte da lógica do servidor (parte do código) por applet ou scripts, dessa 
cada cliente pode se comportar de maneira específica usando os mesmo serviços/recursos.
